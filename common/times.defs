; -*-Scheme-*-

;************************************************************************/
;*                                                                      */
;* Copyright (c) 2003-2009 Vladimir Tsichevski <tsichevski@gmail.com>   */
;*                                                                      */
;* This file is part of bigloo-lib (http://bigloo-lib.sourceforge.net)  */
;*                                                                      */
;* This library is free software; you can redistribute it and/or        */
;* modify it under the terms of the GNU Lesser General Public           */
;* License as published by the Free Software Foundation; either         */
;* version 2 of the License, or (at your option) any later version.     */
;*                                                                      */
;* This library is distributed in the hope that it will be useful,      */
;* but WITHOUT ANY WARRANTY; without even the implied warranty of       */
;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    */
;* Lesser General Public License for more details.                      */
;*                                                                      */
;* You should have received a copy of the GNU Lesser General Public     */
;* License along with this library; if not, write to the Free Software  */
;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 */
;* USA                                                                  */
;*                                                                      */
;************************************************************************/

(module
 times
 (extern
;;  (include "config.h")
  (include "common.h")
  )
 (export
  (clocks-per-second::int)
  (times #!optional which?)
  )
 )

(define (clocks-per-second::int)
  (pragma::int "CLOCKS_PER_SEC"))

(define (times #!optional which?)
  (let()
    (pragma "struct tms buf")
    (let((total::long(pragma::long "times(&buf)")))
      (if which?
	  (case which?
	    ((utime)(pragma::long "buf.tms_utime"))
	    ((stime)(pragma::long "buf.tms_stime"))
	    ((cutime)(pragma::long "buf.tms_cutime"))
	    ((cstime)(pragma::long "buf.tms_cstime"))
	    (else
	     (error "times" "invalid argument, if specified, must be one of (utime stime cutime cstime)" which?)))
	  (values
	   total
	   (pragma::long "buf.tms_utime")
	   (pragma::long "buf.tms_stime")
	   (pragma::long "buf.tms_cutime")
	   (pragma::long "buf.tms_cstime"))))))
